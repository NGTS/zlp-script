---+ Installation

%TOC%

The pipeline itself is fairly self contained. It requires internet access to fetch as it's stored on github, and some [[ZLPDocMain#Dependencies][dependencies]].

---++ Cloning the pipeline

The pipeline is tracked with git on [[https://github.com/NGTS/zlp-script][Github]]. To have access, the user account that clones the repository must be a member of the [[https://github.com/NGTS][NGTS organisation]] on github - email Simon W to ask for access.

Git itself must be installed through your package manager, e.g.:

<verbatim>
# OSX
brew install git

# Ubuntu/Debian
sudo aptitude install git

# SLES
sudo zypper install git
</verbatim>

To deploy, clone the repository in place, or pull from the remote to update changes:

<verbatim>
# If the repository does not exist
git clone git@github.com:NGTS/zlp-script.git

# or if the repository already exists
cd zlp-script
git pull --rebase
</verbatim>

Then get the submodule changes:

<verbatim>
cd zlp-script
git submodule init
git submodule update
git submodule foreach git submodule init
git submodule foreach git submodule update
</verbatim>

These commands have been tested on SLES, Debian 8 and OSX and should be approximately platform independent.

---++ Installation of dependencies

To install the pipeline, the zipped source code can be uncompressed into a directory. The code is self-contained so only looks within itself (like a self imposed =chroot=), but it does expect some external programs (see [[#ExternalPrograms][External Programs]] for details.)

The easiest way to install the Python dependencies is to use the [[http://continuum.io/downloads][Anaconda python distribution]] into the default location (=~/anaconda=). Then install the packages below with:

<verbatim>
conda install numpy scipy matplotlib astropy jinja2 pytest
pip install emcee fitsio mock
</verbatim>

The pipeline looks for the anaconda python distribution in this location, or if not found it uses the system python.

All scripts used are in the =scripts= subdirectory and consist of python files or shell scripts.

The code has dependencies on external tools:

---+++ Dependencies

   * python
   * cfitsio
   * casutools (customised to our needs)

Python packages:

   * numpy
   * scipy
   * emcee (optional, only used for initial wcs solver)
   * matplotlib
   * fitsio
   * astropy
   * jinja2

To run the unit tests:

   * mock
   * pytest

#ExternalPrograms
---++ External programs

These programs must exist on the pipeline-running-user's PATH:

   * CASUTools binaries:
      * imcore
      * imcore_list
      * wcsfit
   * CASU detrender
      * lightcurves-casu
   * sysrem

---+++ CASUTools binaries

These are customised to our needs. The requirements are:

   * wcslib
   * cfitsio

To compile this code:

<verbatim>
git clone git@github.com:NGTS/custom-casutools.git
cd custom-casutools/casutools-src
./configure --with-wcs=<wcs prefix> --with-cfitsio=<cfitsio prefix>
make
(sudo) make install
</verbatim>


---+++ CASU detrender

You must have ssh access to ngtshead to clone this one. If this is true, run the following commands:

<verbatim>
git clone <user>@ngtshead.warwick.ac.uk:/home/sw/git/casu-lightcurves.git
cd casu-lightcurves
git submodule init
git submodule update

# <prefix> is the install location. On ngtshead: /usr/local/pipeline
PKG_CONFIG_PATH=<cfitsio prefix>/lib/pkgconfig make PREFIX=<prefix> PGPLOT_INC= PGPLOT_LIBS= PGPLOT_SRCS=
make install PREFIX=<prefix>
</verbatim>

---+++ sysrem

You must have ssh access to ngtshead to clone this one. If this is true, run the following commands:

<verbatim>
git clone <user>@ngtshead.warwick.ac.uk:/home/sw/git/sysrem.git
cd sysrem

# If this step fails complaining on a missing makefile, copy Makefile.ngtshead:
# cp Makefile.ngtshead Makefile.$(hostname -s) and then edit to your needs
make

# <prefix> is the install location. On ngtshead: /usr/local/pipeline
make install PREFIX=<prefix>
</verbatim>
